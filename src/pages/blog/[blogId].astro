---
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import SEO from '../../components/SEO.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { MobileHeader } from '../../components/MobileHeader.tsx';

import { getBlogs, getBlogDetail } from "../../lib/microcms";

export function  isDefined <T>(value: T | undefined | null): value is T {
  return value !== undefined && value !== null;
}

export const prerender = true;

// Fetch the contents of the detailed article page
export async function getStaticPaths() {
  
const response = await getBlogs({ fields: ["id", "content"], limit: 100 });

const PER_PAGE = 10;

return response.contents.map((content: any, index: number) => ({
        params: {
            blogId: content.id,
        },
        props:  {
            page: {
                currentPage: content.id,
                offset: {
                    current: index,
                    prev: index > 0 ? index - 1 : null, 
                    next: index < (response.totalCount - 1) ? index + 1 : null,

                    prevPage: index > 0 ? (index - 1) * PER_PAGE : null,
                    nextPage: index < (response.totalCount - 1) ? index * PER_PAGE : null,
                },
            },
        },
    }))
}



const { blogId } = Astro.params;

const blog = await getBlogDetail(blogId as string);

const jsonData = blog.publishedAt;

const date = JSON.stringify(jsonData).replace(/"/g, '').split('T')[0];

const { page } = Astro.props;

export async function getPrevURL({page}: any) : Promise<any> {

    const isPrevOffset = isDefined(page.offset.prev);
        if(isPrevOffset) {
            return getBlogs({ offset: page.offset.prev, limit: 1 });
        } else {
            return null;
    }

}

const prevUrl = await getPrevURL({page});

export async function getNextURL({page}: any) : Promise<any> {

const isNextOffset = isDefined(page.offset.next);
    if(isNextOffset) {
        return getBlogs({ offset: page.offset.next, limit: 1 });
    } else {
        return  null;
    }

}

const nextUrl = await getNextURL({page});
---
<!doctype html>
<html lang="en">
    <head>
        <SEO title={SITE_TITLE} description={SITE_DESCRIPTION}/>
    </head>
    <body class="flex flex-col min-h-screen">
        <div id="conditionalDiv" class="hidden md:block">
            <Header title={SITE_TITLE} description={SITE_DESCRIPTION} />
        </div>
        <div id="reactDiv" class="block md:hidden">
            <MobileHeader client:visible/>
        </div>

        <main class="mt-24 md:mt-16 flex-grow">
            <airticle class="w-full flex-col justify-center">
                <h1 class="mx-4 my-4 font-bold text-base sm:text-2xl flex justify-center">{blog.title}</h1>
                <div class="mx-16 flex justify-center">
                    <img src={blog.image?.url ? blog.image.url : null } alt={blog.title} />
                </div>
                <p class="mt-1 mb-4 flex justify-center text-xs md:text-base">published at: {date}</p>
                <div class="flex justify-center">
                    <div class="w-3/5 sm:3/4 lg:w-2/4 text-base sm:text-lg md:text-xl lg:text-2xl mx-4 md:mx-16 mb-8 " set:html={blog.content}></div>
                </div>
            </airticle>
        </main>
   

        <div class="w-full flex justify-center">
            <div class="w-40 px-4 py-2 flex justify-center hover:text-accentdark">
                {prevUrl ? <a href={`/blog/${prevUrl.contents[0].id}`}>Previous</a> : null}
            </div>
            <div class="w-40 px-4 py-2 flex justify-center hover:text-accentdark">
                <a href={'/blog/1'}>Blog</a>
            </div>
            <div class="w-40 px-4 py-2 flex justify-center hover:text-accentdark">
                {nextUrl ? <a href={`/blog/${nextUrl.contents[0].id}`}>Next</a> : null}
            </div>
        </div>
        <Footer />
    </body>

</html>

<script>
    function handleResize() {
        // Get the window width
        const windowWidth = window.innerWidth;
    
        // Get the element you want to conditionally show/hide
        const conditionalDiv = document.getElementById('conditionalDiv');
        console.log("console.conditionalDiv", conditionalDiv);
    
        // Check if the window width is greater than or equal to the md size (adjust the value as needed)
        if (windowWidth >= 768) { // Assuming 768 is your md size
            conditionalDiv!.classList.remove('hidden');
            conditionalDiv!.classList.add('animate-none'); // Add this line to disable animation
        } else {
            conditionalDiv!.classList.add('hidden');
            conditionalDiv!.classList.remove('animate-none');
        }
    }
    // Register the event listener for window resize
    window.addEventListener('resize', handleResize);
    // Initial call to handleResize to set the initial state based on window size
    handleResize();
</script>